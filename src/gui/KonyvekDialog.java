/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.sql.SQLException;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import model.IModel;
import model.Konyv;
import model.Tag;

/**
 *
 * @author nagyg
 */
public class KonyvekDialog extends javax.swing.JDialog implements TableModelListener {

    private java.awt.Frame parent;
    private IModel model;
    private List<Tag> tagok;
    private List<Konyv> konyvek;
    private DefaultTableModel dtm;

    public KonyvekDialog(java.awt.Frame parent, boolean modal, IModel model) {
        super(parent, modal);
        initComponents();

        this.parent = parent;
        this.model = model;

        dtm = (DefaultTableModel) tblKonyvek.getModel();
        dtm.addTableModelListener(this);

        setLocationRelativeTo(parent);
        setTitle("Könyvek kölcsönzésének kezelése");

        try {
            tagok = model.getAllTag();
            cbTag.setModel(new DefaultComboBoxModel(tagok.toArray()));
            btnOsszes.doClick();

        } catch (SQLException ex) {
            Foablak.hibaAblak(ex.toString());
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbTagok = new javax.swing.JLabel();
        cbTag = new javax.swing.JComboBox<>();
        btnOsszes = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblKonyvek = new javax.swing.JTable();
        btnUj = new javax.swing.JButton();
        btnModosit = new javax.swing.JButton();
        btnTorol = new javax.swing.JButton();
        btnOk = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lbTagok.setText("Tagok:");

        cbTag.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbTag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTagActionPerformed(evt);
            }
        });

        btnOsszes.setText("Összes");
        btnOsszes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOsszesActionPerformed(evt);
            }
        });

        tblKonyvek.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tblKonyvek.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Tag", "Szerző", "Cím", "Oldalszám"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblKonyvek);

        btnUj.setText("Új");
        btnUj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUjActionPerformed(evt);
            }
        });

        btnModosit.setText("Módosít");
        btnModosit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModositActionPerformed(evt);
            }
        });

        btnTorol.setText("Töröl");
        btnTorol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTorolActionPerformed(evt);
            }
        });

        btnOk.setText("OK");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbTagok, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cbTag, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnOsszes, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnUj, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnModosit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTorol, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnOk, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnModosit, btnOk, btnTorol, btnUj});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbTagok)
                    .addComponent(cbTag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOsszes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnUj, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(btnModosit)
                        .addGap(40, 40, 40)
                        .addComponent(btnTorol)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnOk))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnModosit, btnOk, btnTorol, btnUj});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOsszesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOsszesActionPerformed
        cbTag.setSelectedIndex(-1);

        try {
            konyvek = model.getAllKonyv();
            tablaFrissit();
        } catch (SQLException ex) {
            Foablak.hibaAblak(ex.toString());
        }


    }//GEN-LAST:event_btnOsszesActionPerformed

    private void btnUjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUjActionPerformed
        Tag kivalasztott = (Tag) cbTag.getSelectedItem();
        KonyvAdatokDialog kad = new KonyvAdatokDialog(parent, tagok, kivalasztott);
        kad.setVisible(true);
        if (kad.isMentes()) {
            Konyv k = kad.getKonyv();
            try {
                model.addKonyv(k);
                if (kivalasztott != null) {
                    konyvek = model.getAllKonyv(kivalasztott);
                } else {
                    konyvek = model.getAllKonyv();
                }
                tablaFrissit();
            } catch (SQLException ex) {
                Foablak.hibaAblak(ex.toString());
            }
        }

    }//GEN-LAST:event_btnUjActionPerformed

    private void cbTagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTagActionPerformed
        Tag kivalasztott = (Tag) cbTag.getSelectedItem();
        if (kivalasztott != null) {
            try {
                konyvek = model.getAllKonyv(kivalasztott);
                tablaFrissit();
            } catch (SQLException ex) {
                Foablak.hibaAblak(ex.toString());
            }

        }
    }//GEN-LAST:event_cbTagActionPerformed

    private void btnTorolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTorolActionPerformed
        int sor = tblKonyvek.getSelectedRow();

        if (sor > -1) {
            Konyv kivalasztott = konyvek.get(sor);
            Object[] options = {"Igen", "Nem"};
            int valasz = JOptionPane.showOptionDialog(parent, "Biztosan törölni szeretnéd?", "Biztos?",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
            if (valasz == JOptionPane.YES_OPTION) {
                try {
                    model.removeKonyv(kivalasztott);
                    konyvek.remove(sor);
                    tablaFrissit();
                } catch (SQLException ex) {
                    Foablak.hibaAblak(ex.toString());
                }
            }
        } else {
            Foablak.hibaAblak("Válasszon ki egy sort a törléshez");
        }

    }//GEN-LAST:event_btnTorolActionPerformed

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        setVisible(false);
    }//GEN-LAST:event_btnOkActionPerformed

    private void btnModositActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModositActionPerformed
        int sor = tblKonyvek.getSelectedRow();
        if (sor > -1) {
            Konyv kivalasztott = konyvek.get(sor);
            KonyvAdatokModositDialog kamd = new KonyvAdatokModositDialog(parent, true, kivalasztott);
            kamd.setVisible(true);
            if (kamd.isMentes()) {
                Konyv k = kamd.getKonyv();
                try {
                    model.updateKonyv(k);
                    tablaFrissit();
                } catch (SQLException ex) {
                    Foablak.hibaAblak(ex.toString());
                }
            }

        } else {
            Foablak.hibaAblak("Válasszon ki egy sort a módosításhoz");
        }
    }//GEN-LAST:event_btnModositActionPerformed

    private void tablaFrissit() {
        dtm.getDataVector().clear();
        dtm.fireTableDataChanged();
        for (Konyv k : konyvek) {
            Vector sor = new Vector();
            Tag tag;

            try {
                tag = model.getTagByID(k.getTagId());

                if (tag != null) {
                    sor.add(tag.getNev());
                } else {
                    sor.add("Nincs ilyen tag");
                }
                sor.add(k.getSzerzo());
                sor.add(k.getCim());
                sor.add(k.getOldalszam());
                dtm.addRow(sor);
            } catch (SQLException ex) {
                Foablak.hibaAblak(ex.toString());
            }
        }
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnModosit;
    private javax.swing.JButton btnOk;
    private javax.swing.JButton btnOsszes;
    private javax.swing.JButton btnTorol;
    private javax.swing.JButton btnUj;
    private javax.swing.JComboBox<String> cbTag;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbTagok;
    private javax.swing.JTable tblKonyvek;
    // End of variables declaration//GEN-END:variables

    @Override
    public void tableChanged(TableModelEvent e) {
        int sor = e.getFirstRow();
        int oszlop = e.getColumn();

        if (sor >= 0 && oszlop >= 0 && e.getType() == TableModelEvent.UPDATE) {
            Object ujErtek = dtm.getValueAt(sor, oszlop);

            Konyv konyv = konyvek.get(sor);
            switch (oszlop) {
                case 1:
                    konyv.setSzerzo((String) ujErtek);
                    break;
                case 2:
                    konyv.setCim((String) ujErtek);
                    break;
                case 3:
                    konyv.setOldalszam((int) ujErtek);
                    break;
            }
            try {
                model.updateKonyv(konyv);
            } catch (SQLException ex) {
                Foablak.hibaAblak(ex.toString());
            }
        }
    }
}
